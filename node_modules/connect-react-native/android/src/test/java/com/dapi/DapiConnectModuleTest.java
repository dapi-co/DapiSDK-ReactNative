package com.dapi;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.ArgumentMatchers.notNull;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import android.app.Activity;
import android.app.Application;

import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.DynamicFromObject;
import com.facebook.react.bridge.JavaOnlyArray;
import com.facebook.react.bridge.JavaOnlyMap;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.WritableArray;
import com.facebook.react.bridge.WritableMap;

import org.json.JSONException;
import org.json.JSONObject;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.MockedStatic;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import co.dapi.connect.core.base.Dapi;
import co.dapi.connect.data.endpoint_models.DapiAccountsMetaDataResponse;
import co.dapi.connect.data.endpoint_models.DapiAccountsResponse;
import co.dapi.connect.data.endpoint_models.DapiBeneficiariesResponse;
import co.dapi.connect.data.endpoint_models.DapiCardsResponse;
import co.dapi.connect.data.endpoint_models.DapiCreateBeneficiaryResponse;
import co.dapi.connect.data.endpoint_models.DapiDelinkUserResponse;
import co.dapi.connect.data.endpoint_models.DapiIdentityResponse;
import co.dapi.connect.data.endpoint_models.DapiTransactionsResponse;
import co.dapi.connect.data.endpoint_models.DapiWireBeneficiariesResponse;
import co.dapi.connect.data.models.DapiColor;
import co.dapi.connect.data.models.DapiConfigurations;
import co.dapi.connect.data.models.DapiConnection;
import co.dapi.connect.data.models.DapiEnvironment;
import co.dapi.connect.data.models.DapiError;
import co.dapi.connect.data.models.DapiLanguage;
import co.dapi.connect.data.models.DapiTheme;
import co.dapi.connect.data.models.DapiThemeConfigurations;
import co.dapi.connect.data.models.LinesAddress;
import co.dapi.connect.data.models.dto.Address;
import co.dapi.connect.data.models.dto.Country;
import co.dapi.connect.data.models.dto.DapiAccountBalance;
import co.dapi.connect.data.models.dto.DapiBeneficiaryCoolDownPeriod;
import co.dapi.connect.data.models.dto.DapiBrandDetails;
import co.dapi.connect.data.models.dto.DapiCardBalance;
import co.dapi.connect.data.models.dto.DapiCurrency;
import co.dapi.connect.data.models.dto.RoutingNumber;
import co.dapi.connect.data.models.dto.TransactionRange;
import co.dapi.connect.data.models.dto.TransferBound;
import co.dapi.connect.data.models.dto.TypeValuePair;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;

@SuppressWarnings("Since15")
@RunWith(MockitoJUnitRunner.class)
public class DapiConnectModuleTest {

    DapiConnectModule plugin;
    Promise result;
    WritableMap configurations;
    String jsonParameters = "{\n" +
            "    \"bankId\": \"DAPIBANK_AE_ADCB\",\n" +
            "    \"clientUserID\": \"CLIENT_USER_ID\",\n" +
            "    \"color\": {\n" +
            "      \"primaryColor\": \"#BD0000\",\n" +
            "      \"secondaryColor\": \"#2A2B38\"\n" +
            "    },\n" +
            "    \"fullLogoPng\": \"https://cdn.dapi.com/banks-full-logo/ADCB.png\",\n" +
            "    \"fullName\": \"Abu Dhabi Commercial Bank Sandbox\",\n" +
            "    \"halfLogoPng\": \"https://cdn.dapi.com/banks-horizontal-logo/ADCB.png\",\n" +
            "    \"miniLogoPng\": \"https://cdn.dapi.com/banks-mini-logo/ADCB.png\",\n" +
            "    \"name\": \"ADCB+Sandbox\",\n" +
            "    \"tokenID\": \"1ceedd1c-c800-45c1-90d2-d8b9597be8d5\",\n" +
            "    \"userID\": \"7x4orrsRTbIDXLcW2rgHbv1wVSsOOxHdRPg3v0SuSjH57LfPp5/rFayQDnvnWnVg8C8XqaGaenWhN1gjMg6dzw==\",\n" +
            "    \"userSecret\": \"eEBCWu5/7NFFM3otkd4UmckEIasotzcPbHCww3jWn2JZaazYgmMUP38h7tT9wNao9I8KS1Ns2oj+mT+2p/21ZyczFigFS28mn791MlclFe6RykqxmbLmnLp+d61fiR7O6vsewcbjgosR0dqHwkQkcth18bcHzaA8dlsdMOFTAY622zvGAWdikKfPggj8MOmBce8VpV817sv+WvCPtSJ8QAHIZ1obYZ0TZIwv6os9Ifc/8V5G+Mo0DAqjAolDzR8542VYYqjJOaG8BDwRN5S2x81CFSwxU8RBAbQEZsJ0G/5RG6TdhVd1UkEqYt3/FRs/ommYOacn8Nf3VKQtEk+gWue2mSAJInxaK2Tfa+POZcEJUN1/756iLq0r5k2bglknYFTxfYab6Xz8X+f00oDlY/z4qhaR5L1ne01oq+Y+AJBQf1Xyf5aRzyQzTZKblJLzH1Y6z8/YWKOKoabwxgldFghPA1RbZtt0YRRa5pykaJFbIPo9dDA+YaeMDdy+5Nkkz4XDwZowUdw5ejR0mEAL1lXMvPoq5WqmABwRg0Y/dAbD0zgBn0vKQy5VE+FER/QtlEgQpf83jfoBSfwEHCHPPs0gjvw6aiFQqmykNIeuMCeYovEd1OMep3eQ0xX8A7I6yFnJnVNT3kx0KS+kLeLik5Wxh2YpCmqehYUugt5EKzw=\"\n" +
            "  }";

    DapiConnection connection = new DapiConnection(
            "clientUserID",
            "userID",
            "bankID",
            "swiftCode",
            "country",
            "name",
            "fullName",
            new ArrayList<>(),
            new ArrayList<>(),
            "fullLogoPng",
            "halfLogoPng",
            "miniLogoPng",
            "tokenID",
            new HashMap<>()
    );

    DapiConnection connection2 = new DapiConnection(
            "clientUserID2",
            "userID2",
            "bankID2",
            "swiftCode2",
            "country2",
            "name2",
            "fullName2",
            new ArrayList<>(),
            new ArrayList<>(),
            "fullLogoPng2",
            "halfLogoPng2",
            "miniLogoPng2",
            "tokenID2",
            new HashMap<>()
    );

    DapiAccountsResponse.DapiAccount account = new DapiAccountsResponse.DapiAccount(
            "id",
            "number",
            new DapiAccountBalance(
                    "accountNumber",
                    20.0,
                    new DapiCurrency(
                            "code",
                            "name"
                    ),
                    "dueDate"
            ),
            new DapiCurrency(
                    "code",
                    "name"
            ),
            "iban",
            "name",
            List.of(
                    new RoutingNumber(
                            "type",
                            "value"
                    )
            ),
            "type"
    );

    DapiCardsResponse.DapiCard card = new DapiCardsResponse.DapiCard(
            "id",
            "cardNumber",
            new DapiCardBalance(
                    10.0,
                    10.0,
                    "cardNumber",
                    new DapiCurrency(
                            "code",
                            "name"
                    ),
                    "dueDate",
                    30.0
            ),
            100.0,
            new DapiCurrency(
                    "code",
                    "name"
            ),
            "expiryDate",
            "name",
            "status",
            "type"
    );

    DapiError error = new DapiError(
            "TEST_TYPE",
            "message",
            "localizedMessage",
            "operationID",
            "title",
            new DapiBeneficiaryCoolDownPeriod("unit", 12.0));

    String jsonError = "{\"unit\":\"unit\",\"operationID\":\"operationID\",\"message\":\"message\",\"type\":\"TEST_TYPE\",\"value\":12}";

    MockedStatic<Dapi> dapiMock;
    MockedStatic<Arguments> argsMock;
    @Before
    public void setUp() {
        dapiMock = Mockito.mockStatic(Dapi.class);
        ReactApplicationContext reactApplicationContext = mock(ReactApplicationContext.class);
        when(reactApplicationContext.getCurrentActivity()).thenReturn(mock(Activity.class));
        when(reactApplicationContext.getCurrentActivity().getApplication()).thenReturn(mock(Application.class));
        argsMock = Mockito.mockStatic(Arguments.class);
        argsMock.when(Arguments::createArray).thenAnswer(invocation -> new JavaOnlyArray());
        argsMock.when(Arguments::createMap).thenAnswer(invocation -> new JavaOnlyMap());
        plugin = new DapiConnectModule(reactApplicationContext);
        result = mock(Promise.class);
        configurations = new JavaOnlyMap();
    }

    @After
    public void teardown() {
        dapiMock.close();
        argsMock.close();
        plugin = null;
        result = null;
        configurations = null;
    }

    @Test
    public void testStart_shouldPass() {
        dapiMock.when(() -> Dapi.start(any(), any(), any(), any(), any(), any())).thenAnswer(invocation -> {
            Function0<Void> callback = invocation.getArgument(4);
            return callback.invoke();
        });
        plugin.start("", "", new JavaOnlyMap(), result);
        verify(result).resolve(new JavaOnlyMap());
        verify(result, never()).reject(anyString(), anyString());
    }

    @Test
    public void testStart_shouldFail() {
        dapiMock.when(() -> Dapi.start(any(), any(), any(), any(), any(), any())).thenAnswer(invocation -> {
            Function1<DapiError, Void> callback = invocation.getArgument(5);
            return callback.invoke(error);
        });
        plugin.start("", "", new JavaOnlyMap(), result);
        verify(result).reject(anyString(), eq(jsonError));
        verify(result, never()).resolve(any());
    }

    @Test
    public void testSetConfigurations() {
        WritableMap extraBody = new JavaOnlyMap();
        extraBody.putString("testKey", "testValue");
        WritableMap extraQueryParameters = new JavaOnlyMap();
        extraQueryParameters.putString("testKey", "testValue");
        WritableMap extraHeaderFields = new JavaOnlyMap();
        extraHeaderFields.putString("testKey", "testValue");
        WritableArray countries = new JavaOnlyArray();
        countries.pushString("AE");
        countries.pushString("EG");
        WritableMap theme = new JavaOnlyMap();
        theme.putString("enforceTheme", "dark");
        WritableMap primaryColor = new JavaOnlyMap();
        primaryColor.putString("lightMode", "#123456");
        primaryColor.putString("darkMode", "#654321");
        theme.putMap("primaryColor", primaryColor);
        configurations.putMap("extraBody", extraBody);
        configurations.putMap("extraQueryParameters", extraQueryParameters);
        configurations.putMap("extraHeaderFields", extraHeaderFields);
        configurations.putString("environment", "sandbox");
        configurations.putArray("countries", countries);
        configurations.putBoolean("showLogos", false);
        configurations.putBoolean("showExperimentalBanks", true);
        configurations.putBoolean("showCloseButton", false);
        configurations.putBoolean("showAddButton", true);
        configurations.putBoolean("showTransferSuccessfulResult", false);
        configurations.putBoolean("showTransferErrorResult", true);
        configurations.putString("postSuccessfulConnectionLoadingText", "testText");
        configurations.putMap("theme", theme);
        configurations.putString("language", "ar");
        plugin.setConfigurations(configurations);
        dapiMock.verify(() -> Dapi.setConfigurations(notNull()));
    }

    @Test
    public void testConfigurations() {
        WritableMap extraBody = new JavaOnlyMap();
        extraBody.putString("testKey", "testValue");
        WritableMap extraQueryParameters = new JavaOnlyMap();
        extraQueryParameters.putString("testKey", "testValue");
        WritableMap extraHeaderFields = new JavaOnlyMap();
        extraHeaderFields.putString("testKey", "testValue");
        WritableArray countries = new JavaOnlyArray();
        countries.pushString("AE");
        countries.pushString("EG");
        WritableMap theme = new JavaOnlyMap();
        theme.putString("enforceTheme", "DARK");
        WritableMap primaryColor = new JavaOnlyMap();
        primaryColor.putString("lightMode", "#123456");
        primaryColor.putString("darkMode", "#654321");
        theme.putMap("primaryColor", primaryColor);
        configurations.putMap("extraBody", extraBody);
        configurations.putMap("extraQueryParameters", extraQueryParameters);
        configurations.putMap("extraHeaderFields", extraHeaderFields);
        configurations.putString("environment", "SANDBOX");
        configurations.putArray("countries", countries);
        configurations.putBoolean("showLogos", false);
        configurations.putBoolean("showExperimentalBanks", true);
        configurations.putBoolean("showCloseButton", false);
        configurations.putBoolean("showAddButton", true);
        configurations.putBoolean("showTransferSuccessfulResult", false);
        configurations.putBoolean("showTransferErrorResult", true);
        configurations.putString("postSuccessfulConnectionLoadingText", "testText");
        configurations.putMap("theme", theme);
        configurations.putString("language", "AR");
        dapiMock.when(Dapi::getConfigurations).thenAnswer(invocation -> new DapiConfigurations(
                extraBody.toHashMap(),
                extraQueryParameters.toHashMap(),
                extraHeaderFields.toHashMap(),
                DapiEnvironment.SANDBOX,
                new String[]{"AE", "EG"},
                false,
                true,
                false,
                true,
                "testText",
                false,
                true,
                new DapiThemeConfigurations(DapiTheme.DARK, new DapiColor("#123456", "#654321")),
                DapiLanguage.AR
        ));
        plugin.configurations(result);
        verify(result).resolve(configurations);
    }

    @Test
    public void testPresentConnect_nullBankID() {
        plugin.presentConnect(null);
        dapiMock.verify(() -> Dapi.presentConnect(null));
    }

    @Test
    public void testPresentConnect_nonNullBankID() {
        plugin.presentConnect("ABC");
        dapiMock.verify(() -> Dapi.presentConnect("ABC"));
    }

    @Test
    public void testDismissConnect() {
        plugin.dismissConnect();
        dapiMock.verify(Dapi::dismissConnect);
    }

    @Test
    public void testSetClientUserID() {
        plugin.setClientUserID("ABC");
        dapiMock.verify(() -> Dapi.setClientUserID("ABC"));
    }

    @Test
    public void testClientUserID() {
        dapiMock.when(Dapi::getClientUserID).thenAnswer(invocation -> "ABC");
        plugin.clientUserID(result);
        dapiMock.verify(Dapi::getClientUserID);
        verify(result).resolve("ABC");
    }

//    @Test
//    public void testGetConnections() {
//        dapiMock.when(() -> Dapi.getConnections(any(), any())).thenAnswer(invocation -> {
//            Function1<List<DapiConnection>, Void> callback = invocation.getArgument(0);
//            return callback.invoke(new ArrayList<>(Arrays.asList(connection, connection2)));
//        });
//        plugin.getConnections(result);
//        verify(result).resolve(JavaOnlyArray.from(
//                Arrays.asList(
//                        JavaOnlyMap.of(
//                                "userID", "userID",
//                                "clientUserID", "clientUserID",
//                                "bankID", "bankID",
//                                "swiftCode", "swiftCode",
//                                "bankShortName", "name",
//                                "bankFullName", "fullName",
//                                "country", "country",
//                                "fullLogo", "fullLogoPng",
//                                "halfLogo", "halfLogoPng",
//                                "miniLogo", "miniLogoPng"
//                        ),
//                        JavaOnlyMap.of(
//                                "userID", "userID2",
//                                "clientUserID", "clientUserID2",
//                                "bankID", "bankID2",
//                                "swiftCode", "swiftCode2",
//                                "bankShortName", "name2",
//                                "bankFullName", "fullName2",
//                                "country", "country2",
//                                "fullLogo", "fullLogoPng2",
//                                "halfLogo", "halfLogoPng2",
//                                "miniLogo", "miniLogoPng2"
//                        )
//                )
//        ));
//    }
//
//    @Test
//    public void testCreateConnection() {
//        MockedStatic<DapiConnection> connectionStaticMock = Mockito.mockStatic(DapiConnection.class);
//        connectionStaticMock.when(() -> DapiConnection.create(any(), any(), any())).thenAnswer(invocation -> {
//            Function1<DapiConnection, Void> callback = invocation.getArgument(1);
//            return callback.invoke(connection);
//        });
//        plugin.createConnection(jsonParameters, result);
//        verify(result).resolve(
//                JavaOnlyMap.of(
//                        "userID", "userID",
//                        "clientUserID", "clientUserID",
//                        "bankID", "bankID",
//                        "swiftCode", "swiftCode",
//                        "bankShortName", "name",
//                        "bankFullName", "fullName",
//                        "country", "country",
//                        "fullLogo", "fullLogoPng",
//                        "halfLogo", "halfLogoPng",
//                        "miniLogo", "miniLogoPng"
//                )
//        );
//    }

    @Test
    public void testGetParameters() throws JSONException {
        DapiConnection connection = mock(DapiConnection.class);
        when(connection.getUserID()).thenReturn("userID");
        dapiMock.when(() -> Dapi.getConnections(any(), any())).thenAnswer(invocation -> {
            Function1<List<DapiConnection>, Void> callback = invocation.getArgument(0);
            return callback.invoke(new ArrayList<>(List.of(connection)));
        });
        doAnswer((invocation) -> {
            Function1<JSONObject, Void> callback = invocation.getArgument(0);
            return callback.invoke(new JSONObject(jsonParameters));
        }).when(connection).getParameters(any(), any());
        plugin.getConnectionParameters("userID", result);
        verify(result).resolve(new JSONObject(jsonParameters).toString());
    }

    @Test
    public void testGetIdentity() {
        DapiConnection connection = mock(DapiConnection.class);
        when(connection.getUserID()).thenReturn("userID");
        dapiMock.when(() -> Dapi.getConnections(any(), any())).thenAnswer(invocation -> {
            Function1<List<DapiConnection>, Void> callback = invocation.getArgument(0);
            return callback.invoke(new ArrayList<>(List.of(connection)));
        });
        doAnswer((invocation) -> {
            Function1<DapiIdentityResponse, Void> callback = invocation.getArgument(0);
            return callback.invoke(
                    new DapiIdentityResponse(
                            new DapiIdentityResponse.DapiIdentity(
                                    "name",
                                    new Address("area",
                                            "building",
                                            "city",
                                            "country",
                                            "flat",
                                            "full",
                                            "poBox",
                                            "state",
                                            "zipCode"
                                    ),
                                    "dateOfBirth",
                                    "emailAddress",
                                    List.of(
                                            new TypeValuePair(
                                                    "type",
                                                    "value"
                                            )
                                    ),
                                    "nationality",
                                    List.of(
                                            new TypeValuePair(
                                                    "type",
                                                    "value"
                                            )
                                    )
                            ), "operationID"
                    )
            );
        }).when(connection).getIdentity(any(), any());
        plugin.getIdentity("userID", result);
        verify(result).resolve(
                JavaOnlyMap.of(
                        "operationID", "operationID",
                        "identity", JavaOnlyMap.of(
                                "name", "name",
                                "dateOfBirth", "dateOfBirth",
                                "emailAddress", "emailAddress",
                                "nationality", "nationality",
                                "address", JavaOnlyMap.of(
                                        "area", "area",
                                        "building", "building",
                                        "city", "city",
                                        "country", "country",
                                        "flat", "flat",
                                        "full", "full",
                                        "poBox", "poBox",
                                        "state", "state",
                                        "zipCode", "zipCode"
                                ),
                                "identification", JavaOnlyArray.of(
                                        JavaOnlyMap.of(
                                                "type", "type",
                                                "value", "value"
                                        )

                                ),
                                "numbers", JavaOnlyArray.of(
                                        JavaOnlyMap.of(
                                                "type", "type",
                                                "value", "value"
                                        )
                                )
                        )
                )

        );
    }

    @Test
    public void testGetAccounts() {
        DapiConnection connection = mock(DapiConnection.class);
        when(connection.getUserID()).thenReturn("userID");
        dapiMock.when(() -> Dapi.getConnections(any(), any())).thenAnswer(invocation -> {
            Function1<List<DapiConnection>, Void> callback = invocation.getArgument(0);
            return callback.invoke(new ArrayList<>(List.of(connection)));
        });
        doAnswer((invocation) -> {
            Function1<DapiAccountsResponse, Void> callback = invocation.getArgument(0);
            return callback.invoke(
                    new DapiAccountsResponse(
                            List.of(new DapiAccountsResponse.DapiAccount(
                                    "id",
                                    "number",
                                    new DapiAccountBalance(
                                            "accountNumber",
                                            20.0,
                                            new DapiCurrency(
                                                    "code",
                                                    "name"
                                            ),
                                            "dueDate"
                                    ),
                                    new DapiCurrency(
                                            "code",
                                            "name"
                                    ),
                                    "iban",
                                    "name",
                                    List.of(
                                            new RoutingNumber(
                                                    "type",
                                                    "value"
                                            )
                                    ),
                                    "type"
                            )), "operationID"
                    )
            );
        }).when(connection).getAccounts(any(), any());
        plugin.getAccounts("userID", result);
        verify(result).resolve(
                JavaOnlyMap.of(
                        "operationID", "operationID",
                        "accounts", JavaOnlyArray.of(
                                JavaOnlyMap.of(
                                        "id", "id",
                                        "number", "number",
                                        "iban", "iban",
                                        "name", "name",
                                        "type", "type",
                                        "balance", JavaOnlyMap.of(
                                                "accountNumber", "accountNumber",
                                                "amount", 20.0,
                                                "currency", JavaOnlyMap.of(
                                                        "code", "code",
                                                        "name", "name"
                                                ),
                                                "dueDate", "dueDate"
                                        ),
                                        "currency", JavaOnlyMap.of(
                                                "code", "code",
                                                "name", "name"
                                        ),
                                        "routingNumbers", JavaOnlyArray.of(
                                                JavaOnlyMap.of(
                                                        "type", "type",
                                                        "value", "value"
                                                )
                                        )
                                )

                        )
                )
        );
    }

    @Test
    public void testGetCards() {
        DapiConnection connection = mock(DapiConnection.class);
        when(connection.getUserID()).thenReturn("userID");
        dapiMock.when(() -> Dapi.getConnections(any(), any())).thenAnswer(invocation -> {
            Function1<List<DapiConnection>, Void> callback = invocation.getArgument(0);
            return callback.invoke(new ArrayList<>(List.of(connection)));
        });
        doAnswer((invocation) -> {
            Function1<DapiCardsResponse, Void> callback = invocation.getArgument(0);
            return callback.invoke(
                    new DapiCardsResponse(
                            List.of(new DapiCardsResponse.DapiCard(
                                    "id",
                                    "cardNumber",
                                    new DapiCardBalance(
                                            10.0,
                                            10.0,
                                            "cardNumber",
                                            new DapiCurrency(
                                                    "code",
                                                    "name"
                                            ),
                                            "dueDate",
                                            30.0
                                    ),
                                    100.0,
                                    new DapiCurrency(
                                            "code",
                                            "name"
                                    ),
                                    "expiryDate",
                                    "name",
                                    "status",
                                    "type"
                            )), "operationID"
                    )
            );
        }).when(connection).getCards(any(), any());
        plugin.getCards("userID", result);
        verify(result).resolve(
                JavaOnlyMap.of(
                        "operationID", "operationID",
                        "cards", JavaOnlyArray.of(
                                JavaOnlyMap.of(
                                        "id", "id",
                                        "cardNumber", "cardNumber",
                                        "balance", JavaOnlyMap.of(
                                                "amountDue", 10.0,
                                                "availableBalance", 10.0,
                                                "cardNumber", "cardNumber",
                                                "dueDate", "dueDate",
                                                "outstandingBalance", 30.0,
                                                "currency", JavaOnlyMap.of(
                                                        "code", "code",
                                                        "name", "name"
                                                )
                                        ),
                                        "creditLimit", 100.0,
                                        "currency", JavaOnlyMap.of(
                                                "code", "code",
                                                "name", "name"
                                        ),
                                        "expiryDate", "expiryDate",
                                        "name", "name",
                                        "status", "status",
                                        "type", "type"
                                )
                        )
                )
        );
    }

    @Test
    public void testGetTransactionsForAccount() {
        DapiConnection connection = mock(DapiConnection.class);
        when(connection.getUserID()).thenReturn("userID");
        dapiMock.when(() -> Dapi.getConnections(any(), any())).thenAnswer(invocation -> {
            Function1<List<DapiConnection>, Void> callback = invocation.getArgument(0);
            return callback.invoke(new ArrayList<>(List.of(connection)));
        });
        doAnswer((invocation) -> {
            Function1<DapiTransactionsResponse, Void> callback = invocation.getArgument(4);
            return callback.invoke(
                    new DapiTransactionsResponse(
                            List.of(
                                    new DapiTransactionsResponse.DapiTransaction(
                                            10.0,
                                            "type",
                                            "date",
                                            20.0,
                                            "description",
                                            new DapiCurrency("code", "name"),
                                            "details",
                                            30.0,
                                            "category",
                                            new DapiBrandDetails("logo", "name"),
                                            "reference")
                            ), "operationID"
                    )
            );
        }).when(connection).getTransactions(eq(account), any(), any(), any(), any(), any());
        when(connection.getAccounts()).thenReturn(List.of(account));
        plugin.getTransactionsForAccount("userID", "id", new DynamicFromObject(1646630400000.2), new DynamicFromObject(1646716800000.2), "enriched", result);
        verify(result).resolve(
                JavaOnlyMap.of(
                        "operationID", "operationID",
                        "transactions", JavaOnlyArray.of(
                                JavaOnlyMap.of(
                                        "amount", 10.0,
                                        "type", "type",
                                        "date", "date",
                                        "beforeAmount", 20.0,
                                        "description", "description",
                                        "currency", JavaOnlyMap.of(
                                                "code", "code",
                                                "name", "name"
                                        ),
                                        "details", "details",
                                        "afterAmount", 30.0,
                                        "category", "category",
                                        "brandDetails", JavaOnlyMap.of(
                                                "logo", "logo",
                                                "name", "name"
                                        ),
                                        "reference", "reference"
                                )
                        )
                )
        );
    }

    @Test
    public void testGetTransactionsForCard() {
        DapiConnection connection = mock(DapiConnection.class);
        when(connection.getUserID()).thenReturn("userID");
        dapiMock.when(() -> Dapi.getConnections(any(), any())).thenAnswer(invocation -> {
            Function1<List<DapiConnection>, Void> callback = invocation.getArgument(0);
            return callback.invoke(new ArrayList<>(List.of(connection)));
        });
        doAnswer((invocation) -> {
            Function1<DapiTransactionsResponse, Void> callback = invocation.getArgument(4);
            return callback.invoke(
                    new DapiTransactionsResponse(
                            List.of(
                                    new DapiTransactionsResponse.DapiTransaction(
                                            10.0,
                                            "type",
                                            "date",
                                            20.0,
                                            "description",
                                            new DapiCurrency("code", "name"),
                                            "details",
                                            30.0,
                                            "category",
                                            new DapiBrandDetails("logo", "name"),
                                            "reference")
                            ), "operationID"
                    )
            );
        }).when(connection).getTransactions(eq(card), any(), any(), any(), any(), any());
        when(connection.getCards()).thenReturn(List.of(card));
        plugin.getTransactionsForCard("userID", "id", new DynamicFromObject(1646630400000.2), new DynamicFromObject(1646716800000.2), "enriched", result);
        verify(result).resolve(
                JavaOnlyMap.of(
                        "operationID", "operationID",
                        "transactions", JavaOnlyArray.of(
                                JavaOnlyMap.of(
                                        "amount", 10.0,
                                        "type", "type",
                                        "date", "date",
                                        "beforeAmount", 20.0,
                                        "description", "description",
                                        "currency", JavaOnlyMap.of(
                                                "code", "code",
                                                "name", "name"
                                        ),
                                        "details", "details",
                                        "afterAmount", 30.0,
                                        "category", "category",
                                        "brandDetails", JavaOnlyMap.of(
                                                "logo", "logo",
                                                "name", "name"
                                        ),
                                        "reference", "reference"
                                )
                        )
                )
        );
    }

    @Test
    public void testGetAccountsMetaData() {
        DapiConnection connection = mock(DapiConnection.class);
        when(connection.getUserID()).thenReturn("userID");
        dapiMock.when(() -> Dapi.getConnections(any(), any())).thenAnswer(invocation -> {
            Function1<List<DapiConnection>, Void> callback = invocation.getArgument(0);
            return callback.invoke(new ArrayList<>(List.of(connection)));
        });
        doAnswer((invocation) -> {
            Function1<DapiAccountsMetaDataResponse, Void> callback = invocation.getArgument(0);
            return callback.invoke(
                    new DapiAccountsMetaDataResponse(
                            new DapiAccountsMetaDataResponse.DapiAccountsMetadata(
                                    "bankId",
                                    "bankName",
                                    new LinesAddress(
                                            "line1",
                                            "line2",
                                            "line3"
                                    ),
                                    new DapiBeneficiaryCoolDownPeriod(
                                            "unit",
                                            10.0
                                    ),
                                    "branchAddress",
                                    "branchName",
                                    new Country(
                                            "code",
                                            "name"
                                    ),
                                    true,
                                    "sortCode",
                                    "swiftCode",
                                    new TransactionRange(
                                            "unit",
                                            1000.0
                                    ),
                                    List.of(
                                            new TransferBound(
                                                    new DapiCurrency(
                                                            "code",
                                                            "name"
                                                    ),
                                                    10.0,
                                                    "type"
                                            )
                                    ),
                                    null,
                                    true
                            ),
                            "operationID"
                    )
            );
        }).when(connection).getAccountsMetaData(any(), any());
        plugin.getAccountsMetadata("userID", result);
        verify(result).resolve(
                JavaOnlyMap.of(
                        "operationID", "operationID",
                        "accountsMetadata", JavaOnlyMap.of(
                                "bankId", "bankId",
                                "bankName", "bankName",
                                "address", JavaOnlyMap.of(
                                        "line1", "line1",
                                        "line2", "line2",
                                        "line3", "line3"
                                ),
                                "beneficiaryCoolDownPeriod", JavaOnlyMap.of(
                                        "unit", "unit",
                                        "value", 10.0
                                ),
                                "branchAddress", "branchAddress",
                                "branchName", "branchName",
                                "country", JavaOnlyMap.of(
                                        "code", "code",
                                        "name", "name"
                                ),
                                "isCreateBeneficiaryEndpointRequired", true,
                                "willNewlyAddedBeneficiaryExistBeforeCoolDownPeriod", true,
                                "sortCode", "sortCode",
                                "swiftCode", "swiftCode",
                                "transactionRange", JavaOnlyMap.of(
                                        "unit", "unit",
                                        "value", 1000.0
                                ),
                                "transferBounds", JavaOnlyArray.of(
                                        JavaOnlyMap.of(
                                                "currency", JavaOnlyMap.of(
                                                        "code", "code",
                                                        "name", "name"
                                                ),
                                                "minimum", 10.0,
                                                "type", "type"
                                        )
                                )
                        )
                )
        );
    }

    @Test
    public void testDelete() {
        DapiConnection connection = mock(DapiConnection.class);
        when(connection.getUserID()).thenReturn("userID");
        dapiMock.when(() -> Dapi.getConnections(any(), any())).thenAnswer(invocation -> {
            Function1<List<DapiConnection>, Void> callback = invocation.getArgument(0);
            return callback.invoke(new ArrayList<>(List.of(connection)));
        });
        doAnswer((invocation) -> {
            Function1<DapiDelinkUserResponse, Void> callback = invocation.getArgument(0);
            return callback.invoke(new DapiDelinkUserResponse("success", "operationID"));
        }).when(connection).delete(any(), any());
        plugin.delete("userID", result);
        verify(result).resolve(
                JavaOnlyMap.of(
                        "operationID", "operationID",
                        "status", "success"
                )
        );
    }

    @Test
    public void testGetBeneficiaries() {
        DapiConnection connection = mock(DapiConnection.class);
        when(connection.getUserID()).thenReturn("userID");
        dapiMock.when(() -> Dapi.getConnections(any(), any())).thenAnswer(invocation -> {
            Function1<List<DapiConnection>, Void> callback = invocation.getArgument(0);
            return callback.invoke(new ArrayList<>(List.of(connection)));
        });
        List<DapiBeneficiariesResponse.Beneficiary> beneficiaries = new ArrayList<>();
        beneficiaries.add(new DapiBeneficiariesResponse.Beneficiary(
                "id",
                "accountNumber",
                "iban",
                "name",
                "type",
                "status"
        ));
        doAnswer((invocation) -> {
            Function1<DapiBeneficiariesResponse, Void> callback = invocation.getArgument(0);
            return callback.invoke(new DapiBeneficiariesResponse(beneficiaries, "operationID"));
        }).when(connection).getBeneficiaries(any(), any());
        plugin.getBeneficiaries("userID", result);
        verify(result).resolve(
                JavaOnlyMap.of(
                        "operationID", "operationID",
                        "beneficiaries", JavaOnlyArray.of(
                                JavaOnlyMap.of(
                                        "id", "id",
                                        "accountNumber", "accountNumber",
                                        "iban", "iban",
                                        "name", "name",
                                        "type", "type",
                                        "status", "status"
                                )
                        )
                )
        );
    }

    @Test
    public void testCreateBeneficiary() {
        DapiConnection connection = mock(DapiConnection.class);
        when(connection.getUserID()).thenReturn("userID");
        dapiMock.when(() -> Dapi.getConnections(any(), any())).thenAnswer(invocation -> {
            Function1<List<DapiConnection>, Void> callback = invocation.getArgument(0);
            return callback.invoke(new ArrayList<>(List.of(connection)));
        });
        DapiCreateBeneficiaryResponse response = new DapiCreateBeneficiaryResponse("success", "operationID");
        doAnswer((invocation) -> {
            Function1<DapiCreateBeneficiaryResponse, Void> callback = invocation.getArgument(1);
            return callback.invoke(response);
        }).when(connection).createBeneficiary(any(), any(), any());
        WritableMap beneficiaryMap = new JavaOnlyMap();
        beneficiaryMap.putMap("linesAddress", JavaOnlyMap.of(
                "line1", "line1",
                "line2", "line2",
                "line3", "line3"
        ));
        beneficiaryMap.putString("accountNumber", "accountNumber");
        beneficiaryMap.putString("name", "name");
        beneficiaryMap.putString("bankName", "bankName");
        beneficiaryMap.putString("swiftCode", "swiftCode");
        beneficiaryMap.putString("iban", "iban");
        beneficiaryMap.putString("country", "country");
        beneficiaryMap.putString("branchAddress", "branchAddress");
        beneficiaryMap.putString("branchName", "branchName");
        beneficiaryMap.putString("phoneNumber", "phoneNumber");
        beneficiaryMap.putString("nickname", "nickname");
        plugin.createBeneficiary("userID", beneficiaryMap, result);
        verify(result).resolve(
                JavaOnlyMap.of(
                        "operationID", "operationID",
                        "status", "success"
                )
        );
    }

    @Test
    public void testGetWireBeneficiaries() {
        DapiConnection connection = mock(DapiConnection.class);
        when(connection.getUserID()).thenReturn("userID");
        dapiMock.when(() -> Dapi.getConnections(any(), any())).thenAnswer(invocation -> {
            Function1<List<DapiConnection>, Void> callback = invocation.getArgument(0);
            return callback.invoke(new ArrayList<>(List.of(connection)));
        });
        List<DapiWireBeneficiariesResponse.WireBeneficiary> beneficiaries = new ArrayList<>();
        beneficiaries.add(new DapiWireBeneficiariesResponse.WireBeneficiary(
                "id",
                "accountNumber",
                new Address("area",
                        "building",
                        "city",
                        "country",
                        "flat",
                        "full",
                        "poBox",
                        "state",
                        "zipCode"
                ),
                "bankName",
                "name",
                "routingNumber",
                "status",
                "type"
        ));
        doAnswer((invocation) -> {
            Function1<DapiWireBeneficiariesResponse, Void> callback = invocation.getArgument(0);
            return callback.invoke(new DapiWireBeneficiariesResponse(beneficiaries, "operationID"));
        }).when(connection).getWireBeneficiaries(any(), any());
        plugin.getWireBeneficiaries("userID", result);
        verify(result).resolve(
                JavaOnlyMap.of(
                        "operationID", "operationID",
                        "beneficiaries", JavaOnlyArray.of(
                                JavaOnlyMap.of(
                                        "id", "id",
                                        "accountNumber", "accountNumber",
                                        "address", JavaOnlyMap.of(
                                                "area", "area",
                                                "building", "building",
                                                "city", "city",
                                                "country", "country",
                                                "flat", "flat",
                                                "full", "full",
                                                "poBox", "poBox",
                                                "state", "state",
                                                "zipCode", "zipCode"
                                        ),
                                        "bankName", "bankName",
                                        "name", "name",
                                        "routingNumber", "routingNumber",
                                        "status", "status",
                                        "type", "type"
                                )
                        )
                )
        );
    }

    @Test
    public void testCreateWireBeneficiary() {
        DapiConnection connection = mock(DapiConnection.class);
        when(connection.getUserID()).thenReturn("userID");
        dapiMock.when(() -> Dapi.getConnections(any(), any())).thenAnswer(invocation -> {
            Function1<List<DapiConnection>, Void> callback = invocation.getArgument(0);
            return callback.invoke(new ArrayList<>(List.of(connection)));
        });
        DapiCreateBeneficiaryResponse response = new DapiCreateBeneficiaryResponse("success", "operationID");
        doAnswer((invocation) -> {
            Function1<DapiCreateBeneficiaryResponse, Void> callback = invocation.getArgument(1);
            return callback.invoke(response);
        }).when(connection).createWireBeneficiary(any(), any(), any());
        WritableMap wireBeneficiaryMap = new JavaOnlyMap();
        wireBeneficiaryMap.putString("name", "name");
        wireBeneficiaryMap.putString("firstName", "firstName");
        wireBeneficiaryMap.putString("lastName", "lastName");
        wireBeneficiaryMap.putString("nickname", "nickname");
        wireBeneficiaryMap.putMap("linesAddress", JavaOnlyMap.of(
                "line1", "line1",
                "line2", "line2",
                "line3", "line3"
        ));
        wireBeneficiaryMap.putString("city", "city");
        wireBeneficiaryMap.putString("state", "state");
        wireBeneficiaryMap.putString("country", "country");
        wireBeneficiaryMap.putString("zipCode", "zipCode");
        wireBeneficiaryMap.putString("receiverType", "receiverType");
        wireBeneficiaryMap.putString("receiverAccountType", "receiverAccountType");
        wireBeneficiaryMap.putString("routingNumber", "routingNumber");
        wireBeneficiaryMap.putString("accountNumber", "accountNumber");

        plugin.createWireBeneficiary("userID", wireBeneficiaryMap, result);
        verify(result).resolve(
                JavaOnlyMap.of(
                        "operationID", "operationID",
                        "status", "success"
                )
        );
    }
}
